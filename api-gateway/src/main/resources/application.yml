server:
  port: 8080

dubbo:
  application:
    name: dubbo-api-gateway #不同的服务不同
  protocol:
    name: dubbo
    port: 18080
  registry:
    address: nacos://127.0.0.1:8848
    timeout: 10000

spring:
  application:
    name: api-gateway
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
            allowCredentials: true
      #路由
      routes:
        - id: api-back
          uri: lb://api-back #lb://api-back
          predicates:
            - Path=/**
#        - id: you
#          uri: http://www.youyou.love
#          predicates:
#            - Path=/you/**
#          filters: #=左边，或者 name，一般是表示内置的过滤器
            #- RewritePath=/you/.*,/
            #服务降级，如果这个路径访问不到，就降级到别的路径
#            - name: CircuitBreaker
#              args:
#                name: myCircuitBreaker
#                fallbackUri: forward:/
            #- RewritePath=/consumingServiceEndpoint, /backingServiceEndpoint
#        - id: a
#          uri: http://www.youyou.love
#          predicates:
#            - Path=/
#        - id: res-food  #路由id
#          uri: lb://res-food #路由微服务目标，lb代表负载均衡
#          predicates: #路由断言，判断是否符合规则，符合则路由到目标
#            - Path=/resFood/**  #以请求路径做判断，以/resfood开头则符合
#            #  - ServiceTimeBetween=08:00,22:00
#            #          filters:
#            #            - TokenFilterFactory
#            #- PrintAny=1,2,3 #要与类名一致
#        #用户
#        - id: shop-user
#          uri: lb://shop-user
#          predicates:
#            - Path=/user/**
            #         filters:
            #            - TokenFilterFactory
            #- After=
            #其他断言看文档
        #          也可以单独加到每个下面
        #          filters:
        #            - args:
        #                - AddRequestHeader=
        #default-filters: #左边的请求头里面的键，右边是值
        #- AddResponseHeader=true,aaaaaa
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin

logging:
  file:
    #path: ${spring.application.name}/logs # 日志文件输出目录
    name: ${spring.application.name}/logs/log.log
  logback:
    rollingpolicy:
      max-file-size: 10MB # 每个日志文件的最大大小
      max-history: 30     # 保留的日志文件天数
      #file-name-pattern: ${spring.application.name}/logs/log.%d{yyyy-MM-dd}.%i.gz # 按日期和索引生成日志文件
      file-name-pattern: ${spring.application.name}/logs/log.%d{yyyy-MM-dd}.%i.gz # 按日期和索引生成日志文件
#  pattern:
#    file: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n" # 日志文件中的格式
#    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n" # 控制台输出的格式
  level:
    org:
      springframework: debug
    com:
      yupi: debug